#!/usr/bin/env ts-node

import * as dotenv from 'dotenv';
import { execSync } from 'child_process';
import * as path from 'path';

// Carregar vari√°veis de ambiente
dotenv.config();

async function runAllTests() {
  console.log('üöÄ Iniciando testes de configura√ß√£o do Wishlist Backend\n');
  console.log('=' .repeat(60));

  const scriptsDir = path.join(__dirname);

  try {
    // Teste 1: Valida√ß√£o de vari√°veis de ambiente
    console.log('\nüìã 1. Testando valida√ß√£o de vari√°veis de ambiente...');
    console.log('-'.repeat(50));

    const requiredVars = [
      'MONGODB_URI',
      'JWT_SECRET',
      'AWS_REGION',
      'COGNITO_USER_POOL_ID',
      'COGNITO_CLIENT_ID',
      'SMTP_HOST',
      'SMTP_PORT',
      'SMTP_USER',
      'SMTP_PASS'
    ];

    const missingVars = requiredVars.filter(varName => !process.env[varName]);
    const configuredVars = requiredVars.filter(varName => process.env[varName]);

    console.log(`‚úÖ Vari√°veis configuradas: ${configuredVars.length}/${requiredVars.length}`);

    if (missingVars.length > 0) {
      console.log(`‚ùå Vari√°veis faltando: ${missingVars.join(', ')}`);
    } else {
      console.log('‚úÖ Todas as vari√°veis de ambiente est√£o configuradas!');
    }

    // Teste 2: AWS Cognito
    console.log('\nüîê 2. Testando AWS Cognito...');
    console.log('-'.repeat(50));

    try {
      execSync(`ts-node ${scriptsDir}/test-cognito.ts`, {
        stdio: 'inherit',
        cwd: process.cwd()
      });
      console.log('‚úÖ Teste do AWS Cognito conclu√≠do!');
    } catch (error) {
      console.log('‚ùå Teste do AWS Cognito falhou - verifique as configura√ß√µes');
    }

    // Teste 3: Email SMTP
    console.log('\nüìß 3. Testando configura√ß√£o de email...');
    console.log('-'.repeat(50));

    try {
      execSync(`ts-node ${scriptsDir}/test-email.ts`, {
        stdio: 'inherit',
        cwd: process.cwd()
      });
      console.log('‚úÖ Teste de email conclu√≠do!');
    } catch (error) {
      console.log('‚ùå Teste de email falhou - verifique as configura√ß√µes SMTP');
    }

    // Teste 4: Aplica√ß√£o (se estiver rodando)
    console.log('\nüåê 4. Testando aplica√ß√£o (opcional)...');
    console.log('-'.repeat(50));

    try {
      const response = await fetch('http://localhost:3000/config-status');
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Aplica√ß√£o est√° rodando e respondendo!');
        console.log(`   Status: ${data.validation.isValid ? '‚úÖ V√°lido' : '‚ùå Inv√°lido'}`);
        console.log(`   Warnings: ${data.validation.warnings.length}`);
        console.log(`   Errors: ${data.validation.errors.length}`);
      } else {
        console.log('‚ö†Ô∏è Aplica√ß√£o n√£o est√° rodando ou n√£o respondeu corretamente');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Aplica√ß√£o n√£o est√° rodando - execute "npm run start:dev" para testar');
    }

    console.log('\n' + '='.repeat(60));
    console.log('üéâ Testes de configura√ß√£o conclu√≠dos!');
    console.log('\nüìã Resumo:');
    console.log(`   ‚Ä¢ Vari√°veis de ambiente: ${configuredVars.length}/${requiredVars.length} configuradas`);
    console.log('   ‚Ä¢ AWS Cognito: Verifique os logs acima');
    console.log('   ‚Ä¢ Email SMTP: Verifique os logs acima');
    console.log('   ‚Ä¢ Aplica√ß√£o: Verifique se est√° rodando');

    console.log('\nüí° Pr√≥ximos passos:');
    console.log('   1. Corrija qualquer erro mostrado acima');
    console.log('   2. Execute "npm run start:dev" para iniciar a aplica√ß√£o');
    console.log('   3. Acesse http://localhost:3000/config-status para ver o status');
    console.log('   4. Teste as funcionalidades de autentica√ß√£o e email');

  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error);
    process.exit(1);
  }
}

// Executar todos os testes
runAllTests().catch(console.error);
